import random

class Cell:
  
   #the most fundamental element of the maze
    
    wall_pairs = {'N': 'S', 'S': 'N', 'E': 'W', 'W': 'E'}
    
    #acts to separate the cells from one another
    
    def __init__(self, x, y):
        
        #Starting the first cell on the x,y axis in a fully walled state.
        self.x, self.y = x, y
        self.walls = {'N': True, 'S': True, 'E': True, 'W': True}
        
        def has_all_walls(self):
            #checks to see if the cell has its walls
            return all(self.walls.values())
        
        def knock_down_wall(self, other, wall):
            #knock down all walls between the cell's self and other
            self.walls[wall] = False
            other.walls[Cell.wall_pairs[wall]] = False
            
            
class Maze:
    #using a grid of cells
    def __init__(self, nx, ny, ix=0, iy=0):
        #the maze consists of "nx by ny" cells
        
        self.nx, self.ny = nx, ny
        self.ix, self.iy = ix, iy
        self.maze_map = [[Cell(x, y) for y in range(ny)]for x in range(nx)]
        
    def cell_at(self, x, y):
        #returns the cell obj. as at (x, y)
        
        return self.maze_map[x][y]
    
    def __str__(self):
        #returns a coarse representation of a maze
        
        maze_rows = ['-' * self.nx * 2]
        for y in range (self.ny):
            maze_row = ['|']
            for x in range(self.nx): 
                if self.maze_map[x][y].walls['E']:
                    maze_row.append(' |')
            else:
                maze_row append('  ')
        maze_rows.append(''.join(maze_row))
        maze_row = ['|']
        for x in range(self.nx):
            if self.maze_map[x][y].walls['S']:
                maze_row.append(' +')
                
            else:
                maze_row.append(' +')
        maze_rows.append(''.join(maze_row))
    return '\n'.join(maze_rows)
def write_svg(self, filename):
    #writes an SVG image of the maze to filename
    
    aspect_ratio = self.nx / self.ny
    padding = 10
    #padding the maze all around the maze by the prescribed amount
    height = 500
    width = int(height * aspect_ratio)
    #height & with of the maze image without padding
    scy, scx = height / self.ny, width / self.nx
    #scaling factors that map maze coordinates to image coordinates
    def write_wall(ww_f, ww_x1, ww_y1, ww_x2, ww_y2):
        #writes a single wall to the SVG image file handle f
        print('<line x1="{}" y1="{}" x2="{}" y2="{}"/>'.format(ww_x1, ww_y1, ww_x2, ww_y2), file=ww_f)